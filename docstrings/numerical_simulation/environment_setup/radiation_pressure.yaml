#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Radiation Pressure Setup ( createBodyShapeModel.h )

extended_summary: |
  This module contains a set of factory functions for setting up the
  radiation pressure models of celestial bodies in an environment, including relevant models
  solar luminosity, solar system body albedo and emissivity, spacecraft surface reaction to radiation pressure.


#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

enums:

  #    py::enum_<tss::RadiationPressureType>
  #        enum tudat::simulation_setup::RadiationPressureType

  - name: KnockeTypeSurfacePropertyDistributionModel
    short_summary: "Enumeration of available 'Knocke-type' surface distribution coefficient sets (see :func:`~knocke_type_surface_property_distribution`)"
    #extended_summary: |
      #Enumeration of radiation pressure types supported by tudat.

    members:
      - name: albedo_knocke
        description: "Coefficients for Earth surface albedo model from Knocke (1989)"
      - name: emissivity_knocke
        description: "Coefficients for Earth surface emissivity model from Knocke (1989)"

  - name: SphericalHarmonicSurfacePropertyDistribution
    short_summary: "Enumeration of available spherical harmonic surface distribution models coefficient sets (see :func:`~spherical_harmonic_surface_property_distribution`)"
      #extended_summary: |
    #Enumeration of radiation pressure types supported by tudat.

    members:
      - name: albedo_dlam1
        description: "Coefficients for DLAM lunar albedo model by FLoberhgen (1999)"

######


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

  - name: LuminosityModelSettings
    short_summary: "Base class for providing settings for body source luminosity settings, to be used (typically but not necesarilly) for defining the Sun's luminosity."

  - name: SurfacePropertyDistributionSettings
    short_summary: "Base class for providing settings for body surface property distribution settings, to be used (typically but not necesarilly) for defining surface distribution of albedo and emissivity of solar system bodies for calculations of albedo and planetary radiation pressure.Note that not all albedo/emissivity models require this type of distribution model"

  - name: PanelRadiosityModelSettings
    short_summary: "Base class for providing settings for body panel radiosity models, to be used (typically but not necesarilly) for defining surface radiosoty of a panelled solar system body as a result of albedo and/or planetary radiation pressure"

  - name: BodyPanelReflectionLawSettings
    short_summary: "Base class for providing settings for body panel relfection law models, to be used for defining spacecraft surface properties relevant for the compuation of radiation pressure acting on a macromodel."

  - name: RadiationSourceModelSettings
    short_summary: "Base class for providing settings for properties of a radiation source (e.g. Sun), to be used in the context of (for instance) calculation of radiation pressure on spacecraft"

  - name: RadiationPressureTargetModelSettings
    short_summary: "Base class for providing settings for properties of a radiation target (e.g. spacecraft), to be used in the context of (for instance) calculation of radiation pressure on spacecraft"



  
##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
#######################################################################
####################### LUMINOSITY MODELS
#######################################################################

  - name: constant_luminosity # [py]
    short_summary: "Factory function for creating constant radiation source luminosity settings."
    extended_summary: |
      Factory function for creating constant radiation source luminosity settings, defining the total
      radiated power (in Watts) of a given source. With this function, the source luminosity is constant, 
      and is assumed to emit radiation isotropically

    parameters:
      - name: luminosity # [py]
        type: float # [py]
        description: "Constant source luminosity (in Watt)"

    returns:
        type: LuminosityModelSettings
        description: Object defining settings for source luminosity

  #######################################################################

  - name: cannonball_radiation_target # [py]
    short_summary: "Factory function for cannonball radtiation target"

    parameters:
      - name: reference_area # [py]
        type: float # [py]
        description: "Cross-sectional area of cannonball [:math:`m^{2}`]"

      - name: radiation_pressure_coefficient # [py]
        type: float # [py]
        description: "Radiation pressure coefficient [-]"

      - name: per_source_occulting_bodies # [py]
        type: Dict[str, List[str]] # [py]
        description: "Names of bodies to occult the source as seen from this target"

    returns:
        type: CannonballRadiationPressureTargetModelSettings
        description: Object defining settings for a cannonball radiation pressure target model

  #######################################################################

  - name: irradiance_based_constant_luminosity # [py]
    short_summary: "Factory function for creating source luminosity settings based on the irradiance at a reference distance."
    extended_summary: |
      Factory function for creating source luminosity based on the irradiance at a reference distance. For instance,
      one can provide the solar irradiance at 1 AU, and this will be translated to the Sun's luminosity. With this function,
      the source luminosity is constant, and is assumed to emit radiation isotropically

    parameters:
      - name: constant_irradiance # [py]
        type: float # [py]
        description: "Irradiance at reference distance from center of source (in :math:`W/m^{2}`)"

      - name: reference_distance # [py]
        type: float # [py]
        description: "Distance from center of source at which the irradiance is defined"

    returns:
      type: LuminosityModelSettings
      description: Object defining settings for source luminosity

  #######################################################################\

  - name: time_variable_luminosity # [py]
    short_summary: "Factory function for creating time-variable radiation source luminosity settings."
    extended_summary: |
      Factory function for creating time-variable radiation source luminosity settings, defining the total
      radiated power (in Watts) of a given source as a function of time. With this function, the source 
      is assumed to emit radiation isotropically

    parameters:
      - name: luminosity_function # [py]
        type: Callable[[float], float] # py
        description: "Function returning source luminosity (in Watt) as a function of time"

    returns:
      type: LuminosityModelSettings
      description: Object defining settings for source luminosity

  #######################################################################

  - name: irradiance_based_time_variable_luminosity # [py]
    short_summary: "Factory function for creating time-variable source luminosity settings based on the irradiance at a reference distance."
    extended_summary: |
      Factory function for creating source time-variable luminosity based on the irradiance at a reference distance. For instance,
      one can provide the solar irradiance at 1 AU as a function of time, and this will be translated to the Sun's luminosity.
      With this function, the source is assumed to emit radiation isotropically

    parameters:
      - name: irradiance_function # [py]
        type: Callable[[float], float] # py
        description: "Function returning irradiance at reference distance from center of source (in :math:`W/m^{2}`) as a function fo time"

      - name: reference_distance # [py]
        type: float # [py]
        description: "Distance from center of source at which the irradiance is defined"

    returns:
      type: LuminosityModelSettings
      description: Object defining settings for source luminosity

  #######################################################################


#######################################################################
####################### SURFACE PROPERTY DISTRIBUTION
#######################################################################

  - name: constant_surface_property_distribution # [py]
    short_summary: "Factory function for creating constant radiative surface property distribution settings."
    extended_summary: |
      Factory function for creating constant radiative surface property (e.g. albedo, emmisivitiy, etc.) distribution settings.

    parameters:
      - name: constant_value # [py]
        type: float # [py]
        description: "Constant surface property value"

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

#######################################################################

  - name: spherical_harmonic_surface_property_distribution # [py]
    short_summary: "Factory function for creating radiative surface property distribution settings according to a spherical harmonic model."
    extended_summary: |
      Factory function for creating radiative surface property (e.g. albedo, emmisivitiy, etc.) distribution settings 
      according to a spherical harmonic model. The user provides unnormalized cosine and sine coefficients :math:`C_{lm}` and :math:`S_{lm}`,
      from which the surface property :math:`k` is computed from:
      
      .. math::
         k(\phi,\theta)=\sum_{l=0}^{l_{max}}\sum_{m=0}^{l}{P}_{lm}(\sin\phi)\left({C}_{lm}\cos m\theta+{S}_{lm}\sin m\theta\right)

      with the angles :math:`\phi` and :math:`\theta` the body-fixed latitude and longitude of the evaluation point

    parameters:
      - name: cosine_coefficients # [py]
        type: numpy.ndarray # [py]
        description: "Cosine coefficients of surface distribution. Entry (i,j) denotes coefficient :math:`{C}_{ij}` at degree i and order j."

      - name: sine_coefficients # [py]
        type: numpy.ndarray # [py]
        description: "Sine coefficients of surface distribution. Entry (i,j) denotes coefficient :math:`{C}_{ij}` at degree i and order j."

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

  #######################################################################

  - name: predefined_spherical_harmonic_surface_property_distribution # [py]
    short_summary: "Factory function for creating radiative surface property distribution settings according to a predefined spherical harmonic model."
    extended_summary: |
      As :func:`spherical_harmonic_surface_property_distribution`, but with a predefined spherical harmonic distribution.

    parameters:
      - name: predefined_model # [py]
        type: SphericalHarmonicsSurfacePropertyDistributionModel # [py]
        description: "Identifier for predefined spherical harmonic surface property model."

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

  #######################################################################

  - name: knocke_type_surface_property_distribution # [py]
    short_summary: "Factory function for creating radiative surface property distribution settings according to 'Knocke-type' model"
    extended_summary: |
      Factory function for creating radiative surface property (e.g. albedo, emmisivitiy, etc.) distribution settings 
      according to a model such as the one used by Knocke (1988). This model uses a degree two zonal spherical harmonic model, with 
      a sinusoidal variation in the degree one coefficient. The surface property :math:`k` is computed from:
      
      .. math::
         k(\phi,t)=a_{0}+a_{1}P_{1}(\sin\phi)+a_{2}P_{2}(\sin\phi)
      .. math::
         a_{1}=c_{0}+c_{1}\cos\left(\frac{2\pi(t-t_{0})}{T}\right)+c_{2}\sin\left(\frac{2\pi(t-t_{0})}{T}\right)

      with the angle :math:`\phi` denotes the body-fixed latitude of the evaluation point, and :math:`t`, :math:`t_{0}` and :math:`T` define the current time, 
      reference time and period of the variation, respectively. The coefficients :math:`a_{0}, a_{2}, c_{0}, c_{1}, c_{2}` are provided by the user.

    parameters:
      - name: constant_contribution # [py]
        type: float # [py]
        description: "Value of :math:`a_{0}` in above formulation."

      - name: constant_degree_one_contribution # [py]
        type: float # [py]
        description: "Value of :math:`c_{0}` in above formulation."

      - name: cosine_periodic_degree_one_contribution # [py]
        type: float # [py]
        description: "Value of :math:`c_{1}` in above formulation."

      - name: sine_periodic_degree_one_contribution # [py]
        type: float # [py]
        description: "Value of :math:`c_{2}` in above formulation."

      - name: constant_degree_two_contribution # [py]
        type: float # [py]
        description: "Value of :math:`a_{2}` in above formulation."

      - name: reference_epoch # [py]
        type: float # [py]
        description: "Reference epoch :math:`t_{0}` of the periodic variation."

      - name: period # [py]
        type: float # [py]
        description: "Period :math:`T` of the periodic variation."

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

  #######################################################################

  - name: predefined_knocke_type_surface_property_distribution # [py]
    short_summary: "Factory function for creating radiative surface property distribution settings according to a predefined 'Knocke-type` model."
    extended_summary: |
      As :func:`spherical_harmonic_surface_property_distribution`, but with a predefined spherical harmonic distribution.

    parameters:
      - name: predefined_model # [py]
        type: KnockeTypeSurfacePropertyDistributionModel # [py]
        description: "Identifier for predefined Knocke-type surface property model."

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

  #######################################################################

  - name: custom_surface_property_distribution # [py]
    short_summary: "Factory function for creating radiative surface property distribution settings according to a custom user-defined model."
    extended_summary: |
      Factory function for creating radiative surface property (e.g. albedo, emmisivitiy, etc.) distribution settings
      according to a custom user-defined model, as a function of latitude, longitude and time

    parameters:
      - name: custom_function # [py]
        type: Callable[[float, float, float], float] # py
        description: "Function providing surface property as a function of latitude, longitude and time (in that order)."

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

  #######################################################################

  - name: constant_radiosity # [py]
    short_summary: "Factory function for creating settings for surface constant surface radiosity of an extended source"
    extended_summary: |
      Factory function for creating settings for surface radiosity of an extended source, using constant Lambertian radiosity :math:`J` (in :math:`W/m^{2}`).
      For a surface panel normal of :math:`\hat{\mathbf{n}}` and a vector :math:`\mathbf{r}` from the surface element to the target, the resulting
      irradiance :math:`\Phi` (in :math:`W/m^{2}`) at the target is (if :math:`theta>0`, or in other words if the panel is visible from the target):
      
      .. math::
         \Phi=J\frac{A\cos\theta}{\pi ||\mathbf{r}||^{2}}
      
      with :math:`A` the panel area, :math:`\theta` is the angle between :math:`\hat{\mathbf{n}}` and :math:`\mathbf{r}`.      

    parameters:
      - name: radiosity # [py]
        type: float # py
        description: "Constant Lambertian radiosity from surface in :math:`W/m^{2}`."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity

  #######################################################################

  - name: constant_albedo_surface_radiosity # [py]
    short_summary: "Factory function for creating settings for surface constant albedo surface radiosity of an extended source"
    extended_summary: |
      Factory function for creating settings for surface radiosity of an extended source, with surface radiation the result
      of albedo using a Lambertian scattering law, and a constant albedo value over the surface.
      For a surface panel normal of :math:`\hat{\mathbf{n}}`, a vector :math:`\mathbf{r}` from the surface element to the target, and a
      vector :math:`\mathbf{r}_{s}` from the surface element to the original source (typically the Sun),
      the resulting irradiance :math:`\Phi` (in :math:`W/m^{2}`) at the target is (if the panel is visible from the target and the original source):

      .. math::
         \Phi=\cos\theta_{s}\Phi_{s}\frac{a}{\pi}\frac{A\cos\theta}{\pi ||\mathbf{r}||^{2}}

      with :math:`\theta_{s}` the angle between :math:`\hat{\mathbf{n}}` and :math:`\mathbf{r_{s}}`, :math:`\Phi_{s}` the irradiance from the original source
      at the panel of the reflecting body, :math:`a` is the albedo coefficient, :math:`A` the panel area, :math:`\theta` is the angle between :math:`\hat{\mathbf{n}}` and :math:`\mathbf{r}`.

    parameters:
      - name: constant_albedo # [py]
        type: float # py
        description: Constant value of the albedo coefficient :math:`a`.

      - name: original_source_name # [py]
        type: str # py
        description: "Name of the original source from which the radiation is reflection to the target."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity


  #######################################################################

  - name: variable_albedo_surface_radiosity # [py]
    short_summary: "Factory function for creating settings for surface variable albedo surface radiosity of an extended source"
    extended_summary: |
      As :func:`constant_albedo_surface_radiosity`, but with the surface albedo :math:`a` defined by a surface distribution model

    parameters:
      - name: albedo_distribution_settings # [py]
        type: SurfacePropertyDistributionSettings # py
        description: Model for the surface distribution of the albedo :math:`a`.

      - name: original_source_name # [py]
        type: str # py
        description: "Name of the original source from which the radiation is reflection to the target."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity

  #######################################################################

  - name: thermal_emission_blackbody_constant_emissivity # [py]
    short_summary: "Factory function for creating settings for surface radiosity of an extended source from an isotropically heated body with constant emmisivity"
    extended_summary: |
      Factory function for creating settings for surface radiosity of an extended source from an isotropically heated body (e.g. IR radiation) with constant surface
      emissivity,
      where the emitted power of the body is computed from the assumption that all heat absorbed from an original source is
      emitted isotropically by the body. For instance, for Earth with Sun as original source, this model is equivalent to
      assuming that a given fraction of all heat incident of the Sun on the Earth is absorbed and causes the full Earth surface to
      heat to a constant temperature, which then results in the body emitting infrared radiation from its surface.

      For a surface panel normal of :math:`\hat{\mathbf{n}}`, a vector :math:`\mathbf{r}` from the surface element to the target,
      the resulting irradiance :math:`\Phi` (in :math:`W/m^{2}`) at the target is (if the panel is visible from the target and the original source):

      .. math::
         \Phi=\frac{\epsilon\Phi_{s}}{4}\frac{A\cos\theta}{\pi ||\mathbf{r}||^{2}}

      with :math:`\epsilon` the emissivity, :math:`\Phi_{s}` the irradiance from the original source,  :math:`A` the panel area, :math:`\theta` is the angle between
      :math:`\hat{\mathbf{n}}` and :math:`\mathbf{r}`.

    parameters:
      - name: constant_emissivity # [py]
        type: float # py
        description: Constant emissivity of the surface :math:`\epsilon`.

      - name: original_source_name # [py]
        type: str # py
        description: "Name of the original source from which the radiation is reflection to the target."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity

  #######################################################################

  - name: thermal_emission_blackbody_variable_emissivity # [py]
    short_summary: "Factory function for creating settings for surface radiosity of an extended source from an isotropically heated body with variable emmisivity"
    extended_summary: |
      As :func:`thermal_emission_blackbody_constant_emissivity`, but with the surface emmisivity :math:`\epsilon` defined by a surface distribution model

    parameters:
      - name: emissivity_distribution_model # [py]
        type: SurfacePropertyDistributionSettings # py
        description: Model for the surface distribution of the emissivity :math:`\epsilon`.

      - name: original_source_name # [py]
        type: str # py
        description: "Name of the original source from which the radiation is reflection to the target."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity

  #######################################################################

  - name: thermal_emission_angle_based_radiosity # [py]
    short_summary: "Factory function for creating settings for surface radiosity of an extended source with surface temperature from Lemoine (2013)"
    extended_summary: |
      Factory function for creating settings for surface radiosity of an extended source from an isotropically heated body (e.g. IR radiation)
      with surface temperature :math:`T` computed from the angle of the surface normal and the original source as follows:

      .. math::
         T=\max\left(T_{max}(\cos\phi_{s})^{1/4},T_{min} \right)

      with :math:`phi_{s}` the angle along a great cirlce arc from the panel to the subsolar (for the Sun as original source) point; for
      a circular body equivalent to the angle of the vector to the original source and the surface normal. The minimum and
      maximum temperatures are user parameters.

      For a surface panel normal of :math:`\hat{\mathbf{n}}`, a vector :math:`\mathbf{r}` from the surface element to the target,
      the resulting irradiance :math:`\Phi` (in :math:`W/m^{2}`) at the target is (if the panel is visible from the target and the original source):

      .. math::
         \Phi=\epsilon kT^{4}\frac{A\cos\theta}{\pi ||\mathbf{r}||^{2}}

      with :math:`\epsilon` the emissivity, :math:`k` the Stefan-Boltzmann constant, :math:`A` the panel area, :math:`\theta` is the angle between
      :math:`\hat{\mathbf{n}}` and :math:`\mathbf{r}`.

    parameters:
      - name: minimum_temperature # [py]
        type: float # py
        description: "Minimum surface temperature :math:`T_{min}`."

      - name: maximum_temperature # [py]
        type: float # py
        description: "Maximum surface temperature :math:`T_{min}`."

      - name: constant_emissivity # [py]
        type: float # py
        description: Constant emissivity of the surface :math:`\epsilon`.

      - name: original_source_name # [py]
        type: str # py
        description: "Name of the original source from which the radiation is reflection to the target."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity

  #######################################################################

  - name: specular_diffuse_body_panel_reflection # [py]
    short_summary: "Factory function for creating settings for target panel reflection law using a specular-diffuse model"
    extended_summary: |
      Factory function for creating settings for target panel reflection law used for a radiation pressure target, with a
      specular diffuse model. The details of the implementation are given by Montenbruck et al. (2015). The reflection
      law is defined by the absorption coefficient :math:`\alpha`, diffuse reflectivity :math:`\delta` and specular reflectivity
      :math:`\rho`, which must meet the condition :math:`\alpha+\delta+\rho=1`. For the model definition, the user provides
      :math:`\alpha` and :math:`\delta` (and :math:`\rho` is calculated). The reaction vector :math:`\hat{\mathbf{f}}` for a panel
      with surface normal :math:`\hat{\mathbf{n}}`, and unit vector from panel surface to source :math:`\hat{\mathbf{r}}` then becomes:

      .. math::
         \hat{\mathbf{f}}=\cos\theta\left((\alpha+\delta)\hat{\mathbf{r}}+(\frac{2}{3}\delta+2\rho\cos\theta)\hat{\mathbf{n}} \right)

      In addition, it can be specified whether the absorbed radiation is also instantaneously retransmitted (according to Lambert's law), in
      which case the above is modified to become:

      .. math::
         \hat{\mathbf{f}}=\cos\theta\left((\alpha+\delta)\left(\hat{\mathbf{r}}+\frac{2}{3}\hat{\mathbf{n}}\right)+2\rho\cos\theta\hat{\mathbf{n}} \right)

    parameters:
      - name: specular_reflectivity # [py]
        type: float # py
        description: Specular reflectivity :math:`\rho`.

      - name: diffuse_reflectivity # [py]
        type: float # py
        description: Diffuse reflectivity :math:`\delta`.

      - name: with_instantaneous_reradiation # [py]
        type: bool # py
        description: "Boolean denoting whether absorbed radiation is instantaneously retransmitted (yes, if true)."

    returns:
      type: BodyPanelReflectionLawSettings
      description: Object defining settings for target panel reflection law

  #######################################################################

  - name: lambertian_body_panel_reflection # [py]
    short_summary: "Factory function for creating settings for target panel reflection law using a Lambertian model"
    extended_summary: |
      Factory function for creating settings for target panel reflection law used for a radiation pressure target, with a
      purely Lambertian model. The implementation is as :func:`specular_diffuse_body_panel_reflection`, with
      :math:`\rho=0` and no instantaneous reradiation. The only free parameter is the reflectivity :math:`\delta`, such that 
      :math:`\alpha=1-\delta`

    parameters:
      - name: reflectivity # [py]
        type: float # py
        description: Reflectivity :math:`\delta`

    returns:
      type: BodyPanelReflectionLawSettings
      description: Object defining settings for target panel reflection law

  #######################################################################

  - name: isotropic_radiation_source # [py]
    short_summary: "Factory function for creating settings for an isotropic radiation source"
    extended_summary: |
      Factory function for creating settings for a radiation source that emits isotropically. The source is provided
      with a luminosity model :math:`L(t)` as a (possible) function of time :math:`t`. The irradiance :math:`\Phi` at a relative position
      :math:`\mathbf{r}` from the source's center is then computed from:

      .. math::
         \Phi=\frac{L}{4\pi||\mathbf{r}||^{2}}

    parameters:
      - name: luminosity_model # [py]
        type: LuminosityModelSettings # py
        description: "Settings for the luminosity model."

    returns:
      type: RadiationSourceModelSettings
      description: Object defining settings for source model irradiance

  #######################################################################

  - name: panelled_radiation_target # [py]
    short_summary: "Factory function for creating settings for a paneled radiation pressure target model"
    extended_summary: |
      Factory function for creating settings for a paneled radiation pressure target model. Each source can have
      its own set of occulting bodies.

    parameters:
      - name: source_to_target_occulting_bodies # [py]
        type: Dict[str, List[str]] # py
        description: "Map (source name -> list of occulting body names) of bodies to occult sources as seen from this target."

    returns:
      type: RadiationPressureTargetModelSettings
      description: Object defining settings for a radiation pressure target model

  #######################################################################

  - name: panelled_extended_radiation_source # [py]
    short_summary: "Factory function for creating settings for a dynamically panelled extended radiation source"
    extended_summary: |
      Factory function for creating settings for a radiation source that is modelled as an anisotropic extended source,
      such as a source due to albedo or planetary IR. The model can combined any number of superimposed surface panel radiosity models
      (e.g. albedo, direct radiation), each of which may or may not involve an 'original source' (e.g. the Sun for albedo).
      Each time the radiation at a given target is computed, the surface of the body is re-panelled, using the algorithm described by
      Knocke (1989). In short, a single panel is placed at the zenith of the evaluation point, with any number of rings around it, each of
      which has any number of (equispaced) panels on it. The width of each ring is such that all panels have the same projected, attenuated area. 
      The panelling settings are defined by the user to this function. The
      The irradiance :math:`\Phi` at a relative position :math:`\mathbf{r}` from the source's center is then computed from all 
      :math:`N` panels, each of which evaluated :math:`M` panel radiosity models

      .. math::
         \Phi=\sum_{i=1}^{N}\sum_{j=1}\Phi_{i,j}
      
      where :math:`\Phi_{i,j}` denotes the contribution to the total irradiance of panel radiosity model :math:`j` on panel :math:`i`

    parameters:
      - name: luminosity_model # [py]
        type: LuminosityModelSettings # py
        description: "Settings for the luminosity model."

    returns:
      type: RadiationSourceModelSettings
      description: Object defining settings for source model irradiance
